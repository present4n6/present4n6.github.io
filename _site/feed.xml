<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://present4n6.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://present4n6.github.io/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2021-06-03T23:57:31+09:00</updated><id>https://present4n6.github.io/feed.xml</id><title type="html">Present4n6</title><subtitle>안녕하세요, 디지털 포렌식 관련 정보 공유 및 기술 블로그입니다.^^ 개념 정리 및 CTF 문제 풀이, CTF 문제 제작 과정, 논문 요약, 디지털 포렌식 이슈 등을 포스팅하고 있습니다.</subtitle><entry><title type="html">EnCase(5) - Keyword 다루기</title><link href="https://present4n6.github.io/posts/EnCase_KeywordSearch/" rel="alternate" type="text/html" title="EnCase(5) - Keyword 다루기" /><published>2021-01-23T16:26:00+09:00</published><updated>2021-01-23T16:26:00+09:00</updated><id>https://present4n6.github.io/posts/EnCase_KeywordSearch</id><content type="html" xml:base="https://present4n6.github.io/posts/EnCase_KeywordSearch/">&lt;h2 id=&quot;encase에서-keyword-검색하기&quot;&gt;&lt;strong&gt;EnCase에서 Keyword 검색하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 EnCase에서 제공해주는 기능 중 하나인 &lt;kbd&gt;Keyword Search&lt;/kbd&gt;를 사용하는 방법에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-keyword-search&quot;&gt;&lt;strong&gt;1. Keyword Search&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이미지 파일에 저장되어 있는 키워드를 찾아야 하는 경우가 종종 있을 것입니다. 예를 들어 용의자의 계좌번호 혹은 메모 같은 것들이 있겠네요. EnCase에서는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Processor&lt;/code&gt;&lt;/strong&gt;를 통해 키워드 검색을 수행할 수 있습니다. Evidence 홈에서 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process Evidence&lt;/code&gt;&lt;/strong&gt;를 선택하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt;&lt;/strong&gt;를 해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/54.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세서 옵션을 보면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search for keywords&lt;/code&gt;&lt;/strong&gt;가 있습니다. 이 항목을 체크해주고 더블클릭해서 값을 지정해주면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/55.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래 그림과 같이 창이 열리는데 New를 눌러 새 키워드를 생성해주어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/56.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New를 하게 되면 여러가지 옵션을 지정해줄 수 있는데 그냥 Default로 지정해주고 password라는 문자열만 찾아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/57.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 하단에 보면 추가로 슬랙 영역을 탐색할 것인지도 설정해줄 수 있습니다. 저는 슬랙 영역까지 탐색을 진행하겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/58.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세싱이 끝나면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View-&amp;gt;Keyword Hits&lt;/code&gt;&lt;/strong&gt;에서 키워드 검색 결과를 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/59.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Items&lt;/code&gt;&lt;/strong&gt;를 선택하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unused Disk Area&lt;/code&gt;&lt;/strong&gt;를 보면 password값이 있는 것을 알 수 있습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compressed View&lt;/code&gt;&lt;/strong&gt;를 선택하면 더 보기좋게 키워드 검색 결과를 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/60.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;실제 해당 디스크 영역에 값이 있는지 확인해보도록 하겠습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unused Disk Area&lt;/code&gt;&lt;/strong&gt;에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;우클릭-&amp;gt;Go to File&lt;/code&gt;&lt;/strong&gt;을 해줍니다.&lt;br /&gt;
&lt;img src=&quot;/assets/post/EnCase/61.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그리고 찾고자하는 값에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;우클릭-&amp;gt;Device-&amp;gt;Disk View&lt;/code&gt;&lt;/strong&gt;를 해줍니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/62.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실제 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disk View&lt;/code&gt;&lt;/strong&gt;영역에서도 아래 그림과 같이 해당 값을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/63.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 EnCase의 키워드 검색을 다뤄봤습니다. 슬랙 영역에 있는 값도 찾아줄 수 있고 검색 결과를 사용자가 보기 편하게 제공해준다는 점이 장점인 것 같습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="DigitalForensics" /><category term="EnCase" /><category term="DigitalForensics" /><category term="EnCase" /><summary type="html">EnCase에서 Keyword 검색하기</summary></entry><entry><title type="html">EnCase(4) - Condition 다루기</title><link href="https://present4n6.github.io/posts/EnCase_Condition/" rel="alternate" type="text/html" title="EnCase(4) - Condition 다루기" /><published>2021-01-22T18:06:00+09:00</published><updated>2021-01-22T18:06:00+09:00</updated><id>https://present4n6.github.io/posts/EnCase_Condition</id><content type="html" xml:base="https://present4n6.github.io/posts/EnCase_Condition/">&lt;h2 id=&quot;encase에서-condition-사용하기&quot;&gt;&lt;strong&gt;EnCase에서 Condition 사용하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 EnCase에서 제공해주는 기능 중 하나인 &lt;kbd&gt;Condition&lt;/kbd&gt;를 사용하는 방법에 대해 알아보도록 하겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-condition&quot;&gt;&lt;strong&gt;1. Condition&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;EnCase의 화면 구성에서 하단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter/EnScript Pane&lt;/code&gt;&lt;/strong&gt;에 보면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conditions&lt;/code&gt;&lt;/strong&gt;라는 것이 있습니다. 이는 파일에 대해 조건문을 수행한다고 보면 되겠습니다. 컨디션은 기본적으로 EnCase에서 제공해주는 것이 있고 사용자가 직접 만들어서 사용할 수도 있습니다. 이번 포스팅에서는 사용자가 만드는 방법에 대해 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/47.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위의 그림에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users&lt;/code&gt;&lt;/strong&gt; 폴더를 선택하고 New를 눌러 새로운 컨디션을 생성해야 합니다. 그러면 아래 그림과 같은 창이 뜨게 되는데 컨디션을 저장할 경로를 지정해주고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if New&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/48.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여러가지 목록 중에서 자신이 필요한 기능을 선택합니다. 저는 jpg 파일만 골라서 보는 기능을 만들기 위해 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;File Ext&lt;/code&gt;&lt;/strong&gt;를 고르고 연산자는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Matches&lt;/code&gt;&lt;/strong&gt;로 일치하는 값들만 뽑을 수 있도록 지정하겠습니다. 그리고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Value&lt;/code&gt;&lt;/strong&gt;에는 jpg라고 입력을 해주었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/49.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;함수하나를 추가해주면 아래 그림과 같이 적용된 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/50.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;또한 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Source Code&lt;/code&gt;&lt;/strong&gt;탭에 가보면 지정해준 함수가 EnScript 형태로 표현이되어 있는 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/51.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성한 컨디션을 실행하기 위해서는 컨디션의 이름을 더블 클릭하면 됩니다. 그리고 옵션을 지정해주고 OK를 선택하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/52.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실행결과는 다음과 같이 JPG 파일만 뽑힌것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/53.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 간단하게 EnCase의 &lt;kbd&gt;Condition&lt;/kbd&gt;을 생성하고 사용하는 방법에 대해서 간단하게 알아봤습니다. 사용자가 원하는 기능을 간단하게 구현을 할 수 있다는 점에서 상당히 좋은 기능인 것 같습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="DigitalForensics" /><category term="EnCase" /><category term="DigitalForensics" /><category term="EnCase" /><summary type="html">EnCase에서 Condition 사용하기</summary></entry><entry><title type="html">EnCase(3) - Hash 다루기</title><link href="https://present4n6.github.io/posts/EnCase_HashSet/" rel="alternate" type="text/html" title="EnCase(3) - Hash 다루기" /><published>2021-01-19T22:26:00+09:00</published><updated>2021-01-19T22:26:00+09:00</updated><id>https://present4n6.github.io/posts/EnCase_HashSet</id><content type="html" xml:base="https://present4n6.github.io/posts/EnCase_HashSet/">&lt;h2 id=&quot;encase에서-hash-구하기&quot;&gt;&lt;strong&gt;EnCase에서 Hash 구하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;이번 포스팅에서는 EnCase를 활용해서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash&lt;/code&gt;&lt;/strong&gt;와 관련있는 기능을 다뤄보겠습니다. 해시값을 측정하고 이미지 파일에 특정 해시값이 존재하는지 검색해보는 것을 해보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;1-파일-해시값-계산하기소수-파일-해시값-구하기&quot;&gt;&lt;strong&gt;1. 파일 해시값 계산하기(소수 파일 해시값 구하기)&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;아래 사진을 보면 Image라는 폴더에 여러가지 그림파일들이 있는것을 확인할 수 있습니다. 해당 폴더의 파일들을 대상으로 해시값을 계산하는 방법에 대해 알아보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/23.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;좌측의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree Pane&lt;/code&gt;&lt;/strong&gt;에서 체크박스에 체크를 해주면 해당 폴더의 모든 파일이 선택됩니다. 그리고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Table Pane&lt;/code&gt;&lt;/strong&gt;에서 우클릭을 하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Entries-&amp;gt;Hash/Sig Selected...&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/24.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 아래그림과 같은 창이 뜨는데 해시값을 계산할 수도 있고 파일시그니처를 검증할 수도 있습니다. 저는 해시값 계산만 해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/25.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;작업이 끝나고 증거 창을 새로고침하면 해시값이 계산되어 있는것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/26.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-파일-해시값-계산하기모든-파일-해시값-구하기&quot;&gt;&lt;strong&gt;2. 파일 해시값 계산하기(모든 파일 해시값 구하기)&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;이번에는 이미지에 존재하는 모든 파일에 대해 해시값을 계산하는 방법을 해보겠습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evidence&lt;/code&gt;&lt;/strong&gt;탭의 Home에서 해시값을 구할 이미지 파일을 선택해주고 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process Evidence-&amp;gt;Process&lt;/code&gt;&lt;/strong&gt; 기능을 선택합니다. 그러면 아래 그림과 같은 창에 새로 열리는데 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Selected Unprocessed Evidence Files&lt;/code&gt;&lt;/strong&gt;를 선택해서 체크한 값에 대해 진행이 되도록 설정한 뒤 아래의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Processor Options&lt;/code&gt;&lt;/strong&gt;에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash analysis&lt;/code&gt;&lt;/strong&gt;를 클릭합니다. Options Label에는 그냥 어떤 동작인지 메모해준다고 생각하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/27.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 구할 해시값을 선택해주고 OK-&amp;gt;OK를 해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/28.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Process의 진행사항을 확인하는 방법이 있습니다. 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View-&amp;gt;Processor Manager&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/29.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Processor Manager&lt;/code&gt;&lt;/strong&gt; 탭이 새로 열리는데 아까 입력한 메모도 확인할 수 있고, 프로세스가 얼마나 진행되었는지 퍼센트를 확인할 수 있습니다. 작업중인 프로세스가 여러개일 경우 우클릭하고 우선순위를 지정해줄 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/30.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로세스가 끝나면 이미지 내의 모든 파일에 대한 해시값이 계산된 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/31.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;encase에서-hash-검색하기&quot;&gt;&lt;strong&gt;EnCase에서 Hash 검색하기&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 E 볼륨에 Image 폴더가 있는 것을 확인했었습니다. 이번에는 그 폴더에서 특정한 파일이 존재하는지 찾기 위해 HashSet을 만들고 서치하는 방법에 대해 알아보겠습니다. 이러한 기능은 해당 매체에서 어떤 파일이 존재한다는 것을 추정할 수 있고 이를 확인하고자 할 때, 혹은 특정 파일이 존재하는지 서치할 때 유용하게 사용할 수 있습니다.&lt;br /&gt;
저는 저작권이 걸려있는 동물 사진을 유포했다는 접수를 받고 해당 파일들이 실제로 매체 내에 존재하는지 확인해본다고 가정을 하고 진행해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-hashlibrary-만들기&quot;&gt;&lt;strong&gt;1. HashLibrary 만들기&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnCase Version : EnCase Forensic Training v20.2&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image File OS : Windows 10&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 유포된것으로 의심되는 파일을 Evidence에 드래그앤드롭으로 올려줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/32.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash Library&lt;/code&gt;&lt;/strong&gt;를 하나 생성해줘야 합니다. 해시 라이브러리는 가장 큰 범주라고 보면 될 것 같습니다. 해시가 모여서 해시값이 되고 해시값이 모여서 해시 라이브러리가 된다고 보면 되겠습니다. 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tools-&amp;gt;Manage Hash Library...&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/33.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Hash Library&lt;/code&gt;&lt;/strong&gt; 창이 열리는데 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New&lt;/code&gt;&lt;/strong&gt;를 눌러서 새로운 라이브러리를 생성해주도록 합니다. 저는 이 케이스에서만 사용할 것이기 때문에 이 케이스의 경로에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash Library&lt;/code&gt;&lt;/strong&gt;라는 폴더를 생성해주고 지정했습니다. 케이스의 경로는 케이스를 처음 생성할 때 지정을 해줬었습니다. 제 경로는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D:\Cases\[CaseName]&lt;/code&gt;&lt;/strong&gt; 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/34.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-hashset-만들기&quot;&gt;&lt;strong&gt;2. HashSet 만들기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;해시라이브러리를 생성했으면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Hash Set&lt;/code&gt;&lt;/strong&gt;을 눌러서 해시셋을 생성해주도록 합니다. 아래 그림과 같이 해시셋의 이름과 태그를 지정해줍니다. 카테고리는 Notable과 None을 지정해줄 수 있는데 Notable로 지정해주겠습니다.(둘의 차이는 기억이 잘 안나네요.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/35.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시셋까지 생성이 완료되면 아래 그림과 같은 결과를 확인할 수 있습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count&lt;/code&gt;&lt;/strong&gt;는 해시셋에 들어있는 해시값의 수를 의미하는데 아직 들어있는 정보가 없기 때문에 0입니다. 이제 해시셋에 해시를 등록해주는 작업을 해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/36.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이제 지금 작업 중인 케이스에 대해 생성한 해시 라이브러리를 적용하기 위해 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case-&amp;gt;Hash Libraries...&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/37.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Primary&lt;/code&gt;&lt;/strong&gt;의 경로부분을 클릭해서 아까 생성했던 해시 라이브러리 경로로 지정을 해줍니다. 아래 그림과 같이 보인다면 정상적으로 지정이된 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/38.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;앞서 했던것처럼 해당 파일들의 해시값을 구한 뒤, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;우클릭-&amp;gt;Entries-&amp;gt;Add to hash library...&lt;/code&gt;&lt;/strong&gt;를 해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/39.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;열린 창에서 해시셋을 선택해주고 OK를 하면 해시셋에 해당 파일의 해시값이 들어가게 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/40.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tools-&amp;gt;Manage Hash Library...&lt;/code&gt;&lt;/strong&gt;에서 다시 확인해보면 파일이 등록되었기 때문에 Count가 5가 된 것을 확인할 수 있습니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Manage Hash Items&lt;/code&gt;&lt;/strong&gt;를 통해 등록된 값에 대한 정보도 확인을 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/41.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해시셋에 값 등록이 끝났으면 구하고자하는 파일 혹은 이미지를 대상으로 해시값을 계산하면 됩니다. 해시값을 계산하게 되면 해시셋에 등록되어 있는 값일 경우 아래 그림처럼 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash Set Names&lt;/code&gt;&lt;/strong&gt;탭에 표시가 됩니다. 해당 탭을 더블클릭하게 되면 정렬을 해주기 때문에 모든 파일을 선택하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hash Set Names&lt;/code&gt;&lt;/strong&gt;를 더블클릭해서 해시셋에 등록되어 있는 값과 동일한 파일을 쉽게 찾아볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/42.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;혹은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt;&lt;/strong&gt;기능을 사용해서 결과물을 확인할 수도 있습니다. 하단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter Pane&lt;/code&gt;&lt;/strong&gt;에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Default-&amp;gt;Items-&amp;gt;Find Items by Hash Set&lt;/code&gt;&lt;/strong&gt;을 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/43.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;결과물의 이름을 지정해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/44.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;찾을 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HashSet&lt;/code&gt;&lt;/strong&gt;의 이름을 지정해줍니다. 위의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Invert&lt;/code&gt;&lt;/strong&gt;체크박스는 입력값을 제외한 나머지 파일을 찾을 때 지정해주는 옵션입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/45.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필터를 사용하게 되면 아래 그림처럼 해당하는 파일들만 골라서 보여줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/46.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 EnCase에서 해시값을 구하는 방법과 또 검색하는 방법에 대해 살펴봤습니다. 해시값을 검색하기 위한 과정이 해야할게 꽤 많은것 같네요. 포렌식학회에서 만든 &lt;kbd&gt;KFOLT&lt;/kbd&gt;라는 프로그램이 있습니다. KFOLT가 아직 미완성 프로그램이긴 하지만 해시값같은 것들을 검색하는 방법에 있어서는 조금더 편하다고 느낄 수 있었습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="DigitalForensics" /><category term="EnCase" /><category term="DigitalForensics" /><category term="EnCase" /><summary type="html">EnCase에서 Hash 구하기</summary></entry><entry><title type="html">EnCase(2) - 삭제된 파티션 복구하기</title><link href="https://present4n6.github.io/posts/EnCase_RestorePartition/" rel="alternate" type="text/html" title="EnCase(2) - 삭제된 파티션 복구하기" /><published>2021-01-15T16:05:00+09:00</published><updated>2021-01-15T16:05:00+09:00</updated><id>https://present4n6.github.io/posts/EnCase_RestorePartition</id><content type="html" xml:base="https://present4n6.github.io/posts/EnCase_RestorePartition/">&lt;h2 id=&quot;encase에서-삭제된-파티션-복구하기&quot;&gt;&lt;strong&gt;EnCase에서 삭제된 파티션 복구하기&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;안녕하세요 EnCase에 대해 다루는 두번째 포스팅을 시작해보겠습니다. 타이틀을 EnCase에서 삭제된 파티션 복구하기라고 적었는데요. 사실 삭제라기 보다는 파티션을 숨겨놓았다고 해야할지..?&lt;br /&gt;
MBR의 Partition Table 영역에서 특정 파티션에 대한 값이 지워져있을 때 인식되지 않는 파티션을 다시 인식시키는 과정을 다뤄보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-encase에-이미지-파일-마운트&quot;&gt;&lt;strong&gt;1. EnCase에 이미지 파일 마운트&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnCase Version : EnCase Forensic Training v20.2&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Image File OS : Windows 10&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째 포스팅에서 진행했던 것처럼 이미지 파일을 EnCase에 올려준 후 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree Pane&lt;/code&gt;&lt;/strong&gt;에서 증거 파일을 선택하고 하단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Report&lt;/code&gt;&lt;/strong&gt; 탭을 눌러서 정보를 확인합니다. Total Size가 약 20GB로 측정이 되어 있는데 Partitions 표의 Size를 합쳐보면 약 12GB로 측정된 것을 알 수 있습니다. 이를 통해서 파티션 정보가 누락이 되어있다는 사실을 의심할 수 있습니다. 실제로 파티션이 누락되어 있는지 확인을 해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/9.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-disk-view-확인&quot;&gt;&lt;strong&gt;2. Disk View 확인&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Table Pane&lt;/code&gt;&lt;/strong&gt; 위에 보면 메뉴바가 있는데 그 중에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Device&lt;/code&gt;&lt;/strong&gt;를 클릭하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disk View&lt;/code&gt;&lt;/strong&gt;를 눌러줍니다. Disk View에서는 이미지 파일의 데이터를 섹터 단위 혹은 클러스터 단위로 보여줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/10.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;섹터 단위로 보려면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View Clusters&lt;/code&gt;&lt;/strong&gt; 항목을 체크 해제하면 됩니다. 아래 그림을 봤을 때 화면 중단에는 섹터 단위로 쭈욱 나열되어 있는 것을 볼 수 있고 특정 섹터를 클릭하게 되면 하단에서 그 섹터에 대한 Hex 값을 확인할 수 있습니다. 그리고 가장 밑의 부분에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PS 0 SO 32 FO 32 LE 6&lt;/code&gt;&lt;/strong&gt; 이라는 글자가 보이는데 이는 Hex 영역에서 선택한 부분에 대한 정보를 나타내는 것입니다. 해석해보면 0번 섹터의 32번 byte 부터 6byte 만큼 블록이 되어있다는 뜻입니다.&lt;br /&gt;
추가로 Disk View에서는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+G&lt;/code&gt;&lt;/strong&gt; 키를 통해 섹터를 자유롭게 이동할 수도 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/11.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;파티션테이블의 정보를 확인하기 위해 MBR이 위치하는 0번 섹터를 선택하고 hex 값을 확인합니다. 파티션테이블의 크기인 64byte만큼 블록을 지정해주고 우측의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decode-&amp;gt;View Types-&amp;gt;Windows-&amp;gt;Partition Entry&lt;/code&gt;&lt;/strong&gt;를 선택하면 표 형식으로 파티션 정보를 확인할 수 있습니다. 아래 그림을 보면 세 번째 파티션의 데이터가 없다는 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/12.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-case-processor-사용하기&quot;&gt;&lt;strong&gt;3. Case Processor 사용하기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;파티션테이블을 보고 직접 수동으로 계산해서 파티션의 시작주소를 찾는 방법도 있겠지만 &lt;kbd&gt;Case Processor&lt;/kbd&gt;라는 기능을 통해 파티션을 찾을 수도 있습니다. 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnScript-&amp;gt;Case Processor&lt;/code&gt;&lt;/strong&gt;를 선택해주면 됩니다. 그리고 정보를 작성한 후 다음, 마침을 하면 화면 하단에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case Processor&lt;/code&gt;&lt;/strong&gt;의 진행표시줄이 보일 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/13.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/post/EnCase/14.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/post/EnCase/15.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case Processor&lt;/code&gt;&lt;/strong&gt; 작업이 완료되면 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View-&amp;gt;Bookmarks&lt;/code&gt;&lt;/strong&gt;에서 결과를 확인할 수 있습니다. 북마크에 가보면 아래 그림과 같이 아까 입력했던 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;삭제된 파티션의 VBR정보 찾기 결과&lt;/code&gt;&lt;/strong&gt;가 있는 것을 알 수 있습니다. 이것을 더블클릭하면 안에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partition Finder&lt;/code&gt;&lt;/strong&gt;가 있고 그 안에 올렸던 이미지 파일의 폴더가 있습니다. 다시 이 폴더에 들어가면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Case Processor&lt;/code&gt;&lt;/strong&gt;가 찾은 파티션들의 정보가 나타나있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/16.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여기서 파티션의 정보를 보면 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unused Disk Area&lt;/code&gt;&lt;/strong&gt;인 것을 통해 할당되지 않은 파티션임을 알 수 있고, 파티션의 총 섹터 크기 및 파일 시스템 종류를 포함하여 시작 섹터가 23,457,792라는 사실을 확인할 수 있습니다. 바로 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disk View&lt;/code&gt;&lt;/strong&gt;의 해당 섹터에서 확인을 할 수도 있겠지만 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Go to File&lt;/code&gt;&lt;/strong&gt;을 통해 확인을 해보겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/17.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;해당 파티션이 위치한 곳의 Hex값을 보니 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exMSDOS5.0&lt;/code&gt;&lt;/strong&gt;이 있는데, 이는 FAT32 파일시스템의 VBR 영역에서 볼 수 있는 점프코드와 OEM ID값입니다. 이를 통해 해당 파티션이 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FAT32 파일 시스템&lt;/code&gt;&lt;/strong&gt;을 사용중인 것을 알 수 있습니다.&lt;br /&gt;
아래 그림처럼 Hex값에 블록을 지정하고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;우클릭-&amp;gt;Device-&amp;gt;Disk View&lt;/code&gt;&lt;/strong&gt;를 하게 되면 해당 Hex값이 위치한 섹터를 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disk View&lt;/code&gt;&lt;/strong&gt;에서 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/18.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disk View&lt;/code&gt;&lt;/strong&gt;로 오게 되면 해당 섹터가 지정이 되어 있습니다. 위치도 앞서 봤던 23,457,792 섹터인 것을 알 수 있고 Hex 값에서도 FAT32 파일시스템의 VBR 구조임을 다시 한 번 확인할 수 있습니다.
여기서 해당 파티션을 인식할 수 있도록 해보겠습니다. 상단의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Partitions-&amp;gt;Add Partition&lt;/code&gt;&lt;/strong&gt;을 눌러줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/19.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;나머지 값은 이미 입력이 되어 있기 때문에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Volume Type&lt;/code&gt;&lt;/strong&gt;을 지정해주고 OK를 하면 파티션 인식이 완료됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/20.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Disk View에서도 할당된 섹터들의 색깔이 바뀐 것을 알 수 있습니다. 한 가지 주의할 점은 실제 이미지 파일의 Hex값이 변경되는 것은 아니고 단순히 EnCase 안에서만 인식이 되었다고 보면 되겠습니다. 당연히 증거 파일의 데이터가 바뀌면 안되니까요.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/21.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 다시 마운트 된 이미지를 열어보면 아래 그림과 같이 처음에는 없던 볼륨이 인식되어 있는 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/22.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 포스팅에서는 &lt;kbd&gt;Case Processor&lt;/kbd&gt;를 사용하고 &lt;kbd&gt;Disk View&lt;/kbd&gt;에서 값을 보며 파티션을 복구하는 방법에 다뤄봤습니다. 역시 인케이스에서 제공해 주는 기능이 강력하다는 것을 한번 더 느낄 수 있었네요.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="DigitalForensics" /><category term="EnCase" /><category term="DigitalForensics" /><category term="EnCase" /><summary type="html">EnCase에서 삭제된 파티션 복구하기</summary></entry><entry><title type="html">EnCase(1) - 케이스 생성 후 증거 파일 추가하기</title><link href="https://present4n6.github.io/posts/Start_EnCase/" rel="alternate" type="text/html" title="EnCase(1) - 케이스 생성 후 증거 파일 추가하기" /><published>2021-01-13T22:02:00+09:00</published><updated>2021-01-13T22:02:00+09:00</updated><id>https://present4n6.github.io/posts/Start_EnCase</id><content type="html" xml:base="https://present4n6.github.io/posts/Start_EnCase/">&lt;h2 id=&quot;encase&quot;&gt;&lt;strong&gt;EnCase?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;디지털포렌식을 수행할 때 사용하는 툴로 가장 널리 알려진 프로그램 중 하나인 &lt;kbd&gt;EnCase&lt;/kbd&gt;에 대해서 포스팅을 해보겠습니다. EnCase는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenText&lt;/code&gt;&lt;/strong&gt;사(구 Guidance Software)에서 제공하는 프로그램입니다. 꽤 오래전부터 디지털포렌식 업무에 사용이 되어왔는데요, 미국 법정에서 EnCase를 사용해서 확보한 디지털 증거를 많이 채택해왔기 때문에 공신력 있는 프로그램으로 평가를 받고 있습니다. 요즘은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Magnet Forensics&lt;/code&gt;&lt;/strong&gt;사의 &lt;kbd&gt;AXIOM&lt;/kbd&gt;, &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nuix&lt;/code&gt;&lt;/strong&gt;사의 &lt;kbd&gt;NUIX&lt;/kbd&gt; 등 뛰어난 프로그램들이 많이 있어서 입지가 줄어들긴 했지만요.&lt;br /&gt;
저도 EnCase를 깊게 사용해보지는 않았습니다만 디스크 이미지를 분석하는데 유용하게 사용할 수 있으며 EnScript라는 프로그래밍 기능을 제공하여 정말 다양한 기능을 사용할 수 있다고 알고 있습니다. 그리고 &lt;kbd&gt;EnCE&lt;/kbd&gt;라는 EnCase 전용 자격증도 있을 정도이죠.&lt;br /&gt;
이렇게 좋은 프로그램이지만 정말 아쉬운 점은 일반인은 사용하기가 어렵다는 점입니다. 가격이 너무비싸서 사용하기가 어려운데요, EnCase를 사용하기 위해서는 무려 천 만원이 넘는 가격을 지불하고 동글키를 얻어야 사용을 할 수 있습니다.&lt;br /&gt;
저는 BoB에서 EnCase를 사용해볼 수 있었습니다. BoB에서는 EnCase 정품을 가지고 있으며 EnCase에 대한 교육도 진행을 하기 때문에 BoB 활동을 하면서 많이 배울 수 있었습니다. BoB를 안 해보신 분들은 BoB에 꼭 지원해서 질 좋은 교육과 많은 경험을 해보셨으면 좋겠습니다.  &lt;br /&gt;
BoB 활동을 하면서 배웠던 EnCase의 기능들을 블로그에 정리를 해볼려고 합니다. 제가 EnCase의 모든 것을 배운것은 아니기 때문에 배웠던 내용들 중 일부분에 한해서 포스팅을 해볼려고 합니다. 이번 포스팅에서는 간단하게 EnCase의 화면구성이 어떻게 되어 있는지 살펴보고, 케이스를 생성하고 증거 파일을 추가하는 것까지 진행을 해보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;encase-맛보기&quot;&gt;&lt;strong&gt;EnCase 맛보기&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-encase-실행&quot;&gt;&lt;strong&gt;1. EnCase 실행&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnCase Version : EnCase Forensic Training v20.2&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EnCase를 실행하면 아래와 같은 화면을 볼 수 있습니다. 최근에 사용했던 Case 목록을 보여주고 새로운 case를 생성할 수 있는 목록이 있습니다. 케이스를 새로 생성하기 위해 New Case를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/1.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-case-생성하기&quot;&gt;&lt;strong&gt;2. Case 생성하기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;New Case를 하면 아래 그림과 같이 Case의 정보를 설정할 수 있습니다. 좌측에 보면 자주 사용하는 Case의 템플릿을 불러올 수도 있고 새로 생성할 수도 있습니다. 우측에는 Case의 이름, 경로 등을 지정해줄 수 있습니다. 또한 백업 옵션도 지정해줄 수가 있는데요. 백업 옵션을 지정하면 용량을 많이 차지하기 때문에 연습할 때는 끄고 진행을 하겠습니다. 현업에서는 당연히 체크를 하고 진행을 하겠죠?&lt;br /&gt;
Case를 생성하는데는 간단하게 이름, 경로, 백업 여부 정도만 지정해주면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/2.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-증거-파일-추가하기&quot;&gt;&lt;strong&gt;3. 증거 파일 추가하기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Case 생성을 정상적으로 완료했다면 아래 화면을 볼 수 있을 것입니다. 그림을 보면 크게 &lt;strong&gt;Search, Browse, Evidence, Report, Case&lt;/strong&gt;로 항목이 나뉘어져있습니다. 증거 파일을 추가하기 위해 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Evidence&lt;/code&gt;&lt;/strong&gt; 항목의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Evidence&lt;/code&gt;&lt;/strong&gt;를 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Search&lt;/td&gt;
      &lt;td&gt;검색기능을 수행했을 때 그 결과를 확인할 수 있는 메뉴를 포함하고 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Browse&lt;/td&gt;
      &lt;td&gt;올라간 증거 파일의 내부 구조를 확인하고 분석할 수 있는 창을 열 수 있으며, EnScript를 작성할 수 있는 메뉴를 포함하고 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Evidence&lt;/td&gt;
      &lt;td&gt;증거 파일을 추가할 수 있고, Process Manager라는 분석 기능을 제공하고 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Report&lt;/td&gt;
      &lt;td&gt;EnCase에서 제공해주는 보고서 작성 기능에 대한 메뉴를 포함하고 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Case&lt;/td&gt;
      &lt;td&gt;설정한 Case의 옵션을 변경하거나 변경된 정보를 저장하는 메뉴를 포함하고 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/3.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add Evidence를 누르면 아래 화면을 볼 수 있습니다. 제가 올릴 이미지 파일은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EVF 파일&lt;/code&gt;&lt;/strong&gt;(EnCase 이미지 파일 포맷)이기 때문에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add Evidence File&lt;/code&gt;&lt;/strong&gt;을 선택하고 마운트할 이미지 파일을 선택해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/4.png&quot; alt=&quot;upload-image&quot; /&gt; 
&lt;img src=&quot;/assets/post/EnCase/5.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-화면구성-살펴보기&quot;&gt;&lt;strong&gt;4. 화면구성 살펴보기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;증거 파일을 올리면 아래 그림처럼 보기만해도 굉장히 복잡해보이는 화면이 나옵니다. 화면에 보이는 내용으로는 이미지 파일의 경로, GUID 값, 무결성 검증 결과 등이 보이고 하단의 Fields 영역에서도 이미지 파일의 해시값, 압축률, 저장매체 정보, 쓰기 방지 정보, 드라이브 타입 등 이미징 할 때 설정한 값과 저장매체의 정보를 확인할 수 있습니다. 또한 Report 탭을 누르게 되면 정보들을 아래와 같이 보기 좋은 형태로 확인할 수 있습니다.&lt;br /&gt;
증거 파일을 디스크 구조로 확인하려면 Name 부분을 클릭하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/6.png&quot; alt=&quot;upload-image&quot; /&gt;
&lt;img src=&quot;/assets/post/EnCase/7.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;EnCase의 분석화면은 아래 그림과 같이 크게 4가지 화면으로 구성이 되어 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Tree Pane&lt;/td&gt;
      &lt;td&gt;디스크 브라우징 기능을 통해 디스크의 데이터를 트리 구조로 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Table Pane&lt;/td&gt;
      &lt;td&gt;파일의 타임스탬프 값, 해시 값, 파일 크기, 섹터 위치 등의 정보를 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;View Pane&lt;/td&gt;
      &lt;td&gt;이미지 파일에 대한 정보를 볼 수 있습니다. 또한 선택한 파일의 Hex값을 볼 수 있으며 데이터 뷰잉 기능을 통해 파일의 형태 등을 보여줍니다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Filter/EnScript Pane&lt;/td&gt;
      &lt;td&gt;필터 기능을 통해 원하는 결과물만 볼 수 있으며 EnScript를 적용할 수 있습니다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/EnCase/8.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EnCase 프로그램을 사용해서 케이스를 생성하고 증거 이미지 파일을 올려보는 것까지 해보았습니다. 이제 분석을 시작하기 위한 재료준비가 완료된 것 같네요. 다음에는 분석을 진행하면서 사용할 수 있는 기능에 대해서 포스팅을 해보도록 하겠습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="DigitalForensics" /><category term="EnCase" /><category term="DigitalForensics" /><category term="EnCase" /><summary type="html">EnCase?</summary></entry><entry><title type="html">PyQt5 GUI 프로그래밍(1) - PyCharm에서 PyQt5 설치하기</title><link href="https://present4n6.github.io/posts/Start_PyQt5/" rel="alternate" type="text/html" title="PyQt5 GUI 프로그래밍(1) - PyCharm에서 PyQt5 설치하기" /><published>2021-01-12T22:07:00+09:00</published><updated>2021-01-12T22:07:00+09:00</updated><id>https://present4n6.github.io/posts/Start_PyQt5</id><content type="html" xml:base="https://present4n6.github.io/posts/Start_PyQt5/">&lt;h2 id=&quot;pyqt5를-사용해서-gui-프로그래밍을-해보자&quot;&gt;&lt;strong&gt;PyQt5를 사용해서 GUI 프로그래밍을 해보자!&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;GUI 프로그래밍을 하는 방법은 여러가지가 있습니다. 저는 그 중에서 친숙한 언어인 Python을 사용해서 GUI 프로그래밍을 하는 방법에 대해 찾아봤습니다. 찾아보니까 PyQt5라는 아주 좋은 플랫폼이 있더라구요. &lt;br /&gt;
몇 번 써보니까 되게 편해서 GUI 프로그래밍을 해야할 때 잘 사용중입니다.&lt;br /&gt;
개인적으로 PyQt5를 공부하면서 느낀점으로는 한글로 된 PyQt5 자료가 많이 없더라구요. 대부분이 영문자료입니다. 저는 GUI 프로그래밍이 처음이기도 했고, 자료가 적다보니 공부를 하면서 많은 벽에 부딪히게 되었는데 혹시나 저처럼 GUI에 입문하시는 분들이 같은 노가다를 겪지 않도록 제가 힘들게 찾았던 기능들을 위주로 포스팅하려고 합니다.&lt;br /&gt;
가장 먼저 이번 포스팅에서는 Python 개발도구인 PyCharm에서 PyQt5와 PyQt5 Designer를 설치하는 방법에 대해 다루겠습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;gui-개발-환경-구축&quot;&gt;&lt;strong&gt;GUI 개발 환경 구축&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-pyqt5-pyqt5-designer-설치&quot;&gt;&lt;strong&gt;1. PyQt5, PyQt5 Designer 설치&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;PyCharm을 실행한 뒤 메인 화면에서 File -&amp;gt; Settings 탭을 열어 줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/1.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 Projects 탭의 Python Interpreter를 누르고 하단의 + 버튼을 클릭합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/2.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 아래와 같이 패키지를 설치할 수 있는 창이 열리는데 pyqt5를 검색한 뒤 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyQt5&lt;/code&gt;&lt;/strong&gt;와 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PyQt5 Designer&lt;/code&gt;&lt;/strong&gt;를 차례대로 설치해주시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/3.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정상적으로 설치가 되었다면 아래그림과 같은 경로에서 Designer를 확인할 수 있습니다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\{사용자}\AppData\Local\Programs\Python\Python38-32\Scripts&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/12.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 어디서든지 Designer와 pyuic5를 사용할 수 있도록 해당 폴더를 환경 변수에 추가해주도록 합니다.(과정 생략)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-pyqt5-designer-맛보기&quot;&gt;&lt;strong&gt;2. PyQt5 Designer 맛보기&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;GUI 프로그래밍을 할 때, 소스코드를 하나하나 손수 입력해주는 방법이 있겠지만 Designer를 사용하면 아주 쉽게 위젯들의 위치를 배치할 수 있습니다. 또한 위젯의 크기 조절이나 속성 값 등을 지정할 수 있기 때문에 작업을 직관적으로 수행할 수 있다는 장점이 있습니다. 다음은 Designer의 화면 구성에 대해 간단하게 알아보고 간단하게 GUI를 구성해보고 PyCharm에서 실행하는 방법까지 살펴보도록 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PyQt5와 PyQt5 Designer를 정상적으로 설치를 완료하셨다면 PyCharm 하단의 Terminal에서 designer를 입력했을 때 아래와 같이 Designer가 실행되는 것을 확인할 수 있을 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/4.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Designer가 실행되면 아래와 같은 화면을 볼 수 있습니다. 화면이 세로로 3등분이 되어있는데 좌측이 사용할 수 있는 위젯들이 위치한 위젯 영역, 가운데가 실제 GUI 디자인을 하는 작업 영역, 우측이 위젯들의 속성을 변경할 수 있는 속성 영역입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/5.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;작업을 하기 위해서는 폼을 먼저 만들어야 합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Main Window&lt;/code&gt;를 선택하고 생성을 해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/6.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main Window가 생성되면 좌측의 위젯영역에서 위젯을 드래그 앤 드롭을 통해 메인 윈도우 위에 배치할 수 있습니다. 저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Buttons&lt;/code&gt; 탭의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Push Button&lt;/code&gt;과 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Check Box&lt;/code&gt; 위젯을 Main Window에 배치를 해봤습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/7.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 실행을 하기 전에 Designer에서 작업한 내용을 저장해줘야 합니다. .ui 파일로 저장이 되는데 이 파일은 Designer에서 읽어오기 위한 파일이며 나중에 Designer에서 이 파일을 불러오기 해서 작업을 이어서 진행할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/8.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프로그램을 실행하기 위해서는 ui 파일을 파이썬 코드로 변환을 해주어야 합니다. 변환을 하는 방법은 ui 파일이 저장된 경로에서 파워쉘이나 CMD를 사용해서 다음 명령어를 수행하면 됩니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;gt; pyuic5 -x .\untitled.ui -o Test.py
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/9.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ui 파일을 파이썬 코드로 변환을 하게 되면 아래와 같은 소스코드를 확인할 수 있습니다. Designer에서 작업했던 내용이 파이썬 코드로 적용이 된건데요, 제가 추가했던 Button과 CheckBox 위젯에 대한 코드도 있는 것을 알 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/10.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변환된 소스코드를 실행하면 아래와 같이 GUI 프로그램이 실행되는 것을 확인할 수 있습니다. 버튼도 클릭이 되고 체크박스도 체크가 되는 것을 알 수 있습니다. 버튼이 눌러졌을 때 기능을 구현하지 않았기 때문에 눌러도 당연히 바뀌는 건 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/startpyqt5/11.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;간단하게 Designer에서 위젯을 배치하고 파이썬 프로그램으로 실행해보는 것까지 다뤄보았습니다. 사실 디자이너만 사용해서 GUI 프로그래밍을 모두 해결할 수는 없습니다. 제가 생각했을 때 디자이너의 용도는 프로그래밍 초기에 UI를 구성할 때 대략적인 틀을 잡아주는 용도로 사용된다 정도 인 것 같습니다. 위젯이 작동할 때 어떤 기능이 동작하는지는 결국 코드로 구현을 해줘야 하니까요.&lt;br /&gt;
어.. 마음 같아선 제가 공부했던 순서대로 포스팅을 하고 싶은데 완전 처음부터 포스팅을 하기에는 내용이 너무 많아서 그냥 일부 기능만 쏙쏙 골라서 할지 조금 고민이 됩니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="Python" /><category term="PyQt5" /><category term="Python" /><category term="PyQt5" /><summary type="html">PyQt5를 사용해서 GUI 프로그래밍을 해보자!</summary></entry><entry><title type="html">GitHub 블로그 만들기(3) - disqus 사용해서 댓글 기능 추가하기</title><link href="https://present4n6.github.io/posts/MakeGitBlog_add_Comments/" rel="alternate" type="text/html" title="GitHub 블로그 만들기(3) - disqus 사용해서 댓글 기능 추가하기" /><published>2020-09-22T15:49:00+09:00</published><updated>2020-09-22T15:49:00+09:00</updated><id>https://present4n6.github.io/posts/MakeGitBlog_add_Comments</id><content type="html" xml:base="https://present4n6.github.io/posts/MakeGitBlog_add_Comments/">&lt;h2 id=&quot;댓글-기능을-추가해볼까&quot;&gt;&lt;strong&gt;댓글 기능을 추가해볼까?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;저번 포스팅에서 개발 환경 구축에 대해 다뤄보았습니다. 이번에는 블로그에 댓글 기능을 추가해보도록 하겠습니다.&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;&lt;/strong&gt; 을 사용해서 블로그를 만들게 되면 댓글 기능이 없어서 따로 추가를 해줘야 합니다.&lt;br /&gt;
댓글 기능이 필요 없는 분들도 계시겠지만 저는 방문하는 손님들과 소통을 하는 것이 좋다고 생각해서 추가를 했습니다. 또 댓글을 다는 곳이 없으면 허전하기도 하구요ㅋㅋ  &lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt;&lt;/strong&gt; 라는 API를 사용해서 추가를 할 건데요, 무료로 댓글 기능을 추가할 수 있어서 많은 사람들이 사용하고 있습니다.&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt;&lt;/strong&gt; 말고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utterances&lt;/code&gt;&lt;/strong&gt; 도 있습니다. 각자 취향에 맞게 사용하시면 될 것 같습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;댓글-기능-추가-과정&quot;&gt;&lt;strong&gt;댓글 기능 추가 과정&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;1-disqus-회원-가입&quot;&gt;&lt;strong&gt;1. disqus 회원 가입&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;disqus 홈페이지에 접속해서 회원가입을 진행합니다. &lt;a href=&quot;https://disqus.com/&quot;&gt;(disqus 홈페이지)&lt;/a&gt;&lt;br /&gt;
페이스북, 구글 등 계정으로 로그인을 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-disqus-유형-선택&quot;&gt;&lt;strong&gt;2. disqus 유형 선택&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;로그인을 했으면 아래 그림과 같은 화면이 나오는데요, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I want to install Disqus on my site&lt;/code&gt;를 눌러줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/21.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-website-name-입력&quot;&gt;&lt;strong&gt;3. Website Name 입력&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Website Name을 입력해주시면 됩니다. 여기에 들어가는 값은 추후 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shortname&lt;/code&gt;&lt;/strong&gt; 이라는 값으로 사용되니 기억해두셔야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/22.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-plan-선택&quot;&gt;&lt;strong&gt;4. Plan 선택&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 어떤 기능을 사용할지 정하는 창이 나오게 되는데요, 무료로 사용하기 위해서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic&lt;/code&gt;을 선택하시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/23.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-platform-선택&quot;&gt;&lt;strong&gt;5. Platform 선택&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;그 다음 어떤 플랫폼을 사용 중인지 고르는 창이 뜹니다. 저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 으로 진행하겠습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/24.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-jekyll-적용-가이드&quot;&gt;&lt;strong&gt;6. Jekyll 적용 가이드&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;그러면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt; 를 Jekyll에 적용하는 방법에 대한 가이드를 해줍니다. &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Universal Embed Code&lt;/code&gt;&lt;/strong&gt; 링크를 눌러서 이동해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/25.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래로 내리면 아래와 같은 코드를 확인할 수 있는데요 이 코드를 복사해둡니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/26.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-jekyll-소스-코드-수정&quot;&gt;&lt;strong&gt;7. Jekyll 소스 코드 수정&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;레파지토리 내의 &lt;kbd&gt;_config.yml&lt;/kbd&gt;  파일을 열어보면 아래 사진과 같이 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comments&lt;/code&gt;&lt;/strong&gt;에 대한 코드가 있습니다. 이 부분은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt; 테마마다 코드가 조금씩 다를 수가 있는데요. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;provider&lt;/code&gt; 라고 되어있는 분은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt;&lt;/strong&gt; 를 입력해주시면 됩니다. 저처럼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boolean&lt;/code&gt; 값으로 설정해야 되는 분들은 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt;&lt;/strong&gt; 로 설정하시면 됩니다.&lt;br /&gt;
그리고 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shortname&lt;/code&gt;&lt;/strong&gt; 값에는 아까 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Website Name&lt;/code&gt;&lt;/strong&gt; 으로 설정했던 값을 넣어주시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/27.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 레파지토리 폴더의 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_include&lt;/code&gt;&lt;/strong&gt; 폴더내에 &lt;kbd&gt;disqus.html&lt;/kbd&gt; 라는 파일을 생성해서 방금 복사한 소스 코드를 붙여넣고 저장해줍니다. 저처럼 이미 파일이 존재하는 분들도 계실 수도 있습니다. 그대로 사용해도 되지만 저는 다음과 같이 새로 덮어써줬습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/28.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이어서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_layout&lt;/code&gt;&lt;/strong&gt; 폴더내에 있는 &lt;kbd&gt;post.html&lt;/kbd&gt; 파일을 수정해줘야 합니다. 이 파일의 역할은 포스팅되는 페이지의 구조를 담당하고 있는데요, 이 파일에서 아까 생성한 &lt;kbd&gt;disqus.html&lt;/kbd&gt; 파일을 호출해줘야 합니다. 이 부분도 테마마다 소스코드가 다를 수 있습니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; 파일 구조를 아시는 분들은 본문에 대한 코드 바로 뒤에 빨간네모로 표시한 소스 코드를 입력하시면 됩니다.&lt;br /&gt;
저는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chirpy&lt;/code&gt; 테마를 사용중인데 이 테마의 경우 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conetent&lt;/code&gt;&lt;/strong&gt; 뒤에 추가하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/29.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-글-작성-시-댓글-기능-포함시키기&quot;&gt;&lt;strong&gt;8. 글 작성 시 댓글 기능 포함시키기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다음 과정을 추가적으로 진행해야 댓글 기능이 생성됩니다.&lt;br /&gt;
마크다운 문서를 작성하실 때 아래 사진과 같이 설정을 해줘야 하는데요, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;comment=true&lt;/code&gt; 라고 선언을 해줘야 합니다.&lt;br /&gt;
또 다른 방법으로는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt;&lt;/strong&gt; 파일에서 전역으로 선언해주는 방법과 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;&lt;/strong&gt; 파일에서 전역으로 설정해주는 방법이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/30.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 과정을 잘 해냈다면 다음과 같이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus&lt;/code&gt; 댓글 창이 생성된 것을 보실 수 있을 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/31.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;요약해보자면 &lt;kbd&gt;disqus&lt;/kbd&gt; API를 불러오는 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus.html&lt;/code&gt;&lt;/strong&gt; 파일을 생성하고 포스트를 담당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; 파일인 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;post.html&lt;/code&gt;&lt;/strong&gt; 파일에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disqus.html&lt;/code&gt;&lt;/strong&gt; 파일을 호출할 수 있도록 설정해준 것입니다.&lt;br /&gt;
그렇다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;footer&lt;/code&gt; 를 담당하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; 파일에 코드를 넣어서 모든 페이지에 댓글 기능을 추가하도록 응용해볼 수도 있을 것입니다.&lt;br /&gt;
이 점이 깃 허브 블로그의 장점입니다. 각 파일의 역할에 대해서 알고 있다면 소스코드를 수정해서 본인이 원하는 대로 블로그를 만들어나갈 수 있다는 것입니다.&lt;br /&gt;
다음에는 작성한 파일을 업로드 하기 위해 필요한 설정에 대해 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="GitHub" /><category term="GithubBlog" /><category term="GitHub" /><category term="GitHubBlog" /><summary type="html">댓글 기능을 추가해볼까?</summary></entry><entry><title type="html">GitHub 블로그 만들기(2) - ruby 사용해서 개발환경 구축하기</title><link href="https://present4n6.github.io/posts/MakeGitBlog_develop_Env/" rel="alternate" type="text/html" title="GitHub 블로그 만들기(2) - ruby 사용해서 개발환경 구축하기" /><published>2020-09-21T16:18:00+09:00</published><updated>2020-09-21T16:18:00+09:00</updated><id>https://present4n6.github.io/posts/MakeGitBlog_develop_Env</id><content type="html" xml:base="https://present4n6.github.io/posts/MakeGitBlog_develop_Env/">&lt;h2 id=&quot;개발-환경-구축-왜-해야-하나요&quot;&gt;&lt;strong&gt;개발 환경 구축 왜 해야 하나요?&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;저번 포스팅에서 깃 허브 블로그를 구축했었는데, 깃 허브 블로그는 단점이 하나 있습니다.&lt;br /&gt;
바로 소스코드를 수정하고 commit 하게 되면 실제 블로그에 적용되기까지 딜레이가 존재하는 것입니다.&lt;br /&gt;
실제로 포스팅을 하기 위해서는 어떻게 보이는지 바로바로 확인을 해야 하는 경우가 종종 있는데요,&lt;br /&gt;
일일이 commit 해서 변경 사항을 확인하기보다는 실시간으로 확인하는 방법이 좋겠죠?&lt;br /&gt;
이 문제를 해결하기 위해서 &lt;kbd&gt;bundle exec jekyll serve&lt;/kbd&gt; 를 사용해서 실시간으로 블로그의 수정 사항을 확인할 수 있습니다.&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;개발-환경-구축&quot;&gt;&lt;strong&gt;개발 환경 구축&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;1-ruby-설치&quot;&gt;&lt;strong&gt;1. Ruby 설치&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;kbd&gt;bundle exec jekyll serve&lt;/kbd&gt; 을 사용하기 위해서는 Ruby를 설치해야 합니다.&lt;br /&gt;
ruby는 &lt;a href=&quot;https://www.ruby-lang.org/ko/documentation/installation/#rubyinstaller&quot;&gt;ruby 공식 홈페이지&lt;/a&gt; 에서 설치를 할 수 있습니다.&lt;br /&gt;
저는 Windows 환경에서 사용할 것이기 때문에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyInstaller&lt;/code&gt;&lt;/strong&gt; 를 설치했습니다.&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RubyInstaller&lt;/code&gt;&lt;/strong&gt; 를 클릭해서 이동합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/9.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다운로드 버튼을 누르면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/10.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;굵게 표시 된 파일을 다운로드 받으면 됩니다. 저는 64bit 환경이라 (x64)를 받았습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/11.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라이센스에 동의하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 누릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/12.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3가지 항목 모두 체크하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 누릅니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/13.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이어서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next&lt;/code&gt;를 계속 누르다 보면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMD&lt;/code&gt; 창이 열리면서 아래 화면과 같이 뜨는데 &lt;kbd&gt;MSYS2&lt;/kbd&gt;
 를 사용하지 않으면 종료하시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/14.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래 사진처럼 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;&lt;/strong&gt;를 입력했을 때 버전이 나오면 정상적으로 진행된 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/15.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;2-jekyll-bundler-설치&quot;&gt;&lt;strong&gt;2. jekyll bundler 설치&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;다음 명령어로 &lt;kbd&gt;jekyll bundler&lt;/kbd&gt; 을 설치해줍니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Git Bash&lt;/code&gt;를 열고 다음과 같이 입력해줍니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Repository 폴더 위치]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/strong&gt; 명령어를 입력해주면 다음과 같은 화면을 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/16.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위 화면이 정상적으로 나오면 웹 페이지 주소 창에 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;&lt;/strong&gt; 을 입력해서 블로그의 변경 사항을 실시간으로 확인할 수 있습니다.&lt;br /&gt;
소스코드를 변경하고 저장할 때마다 터미널에서 &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regenerating&lt;/code&gt;&lt;/strong&gt; 이 출력되며, 웹 페이지를 새로고침하면 바로 적용되는 것을 볼 수 있습니다.&lt;br /&gt;
작업이 끝나면 터미널에서 Ctrl+C를 입력해서 종료할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/17.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3-bundle-exec-jekyll-serve-오류-해결하기tzinfo-error&quot;&gt;&lt;strong&gt;3. bundle exec jekyll serve 오류 해결하기(tzinfo error)&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/strong&gt; 명령어를 입력했는데&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll 4.1.1 | Error:  tzinfo&lt;/code&gt; 이런 오류가 발생하시는 분들이 계실겁니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/18.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이런 오류가 뜨시는 분들은 다음과 같이 진행하시면 됩니다.&lt;br /&gt;
레파지토리 폴더 내에 보면 루트 디렉토리에 &lt;kbd&gt;Gemfile&lt;/kbd&gt;이라는 파일이 있을 것입니다.&lt;br /&gt;
이 파일을 열고 다음과 같은 내용을 추가해주시면 됩니다.
    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tzinfo'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'tzinfo-data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;platforms: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:mingw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mswin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:x64_mingw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/19.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;아래와 같은 오류가 뜬다 하시는 분들은 tzinfo를 수동으로 설치해 줘야 합니다.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;C:/Ruby26-x64/lib/ruby/gems/2.6.0/gems/bundler-2.1.4/lib/bundler/resolver.rb:290:in `block in verify_gemfile_dependencies_are_found!': Could not find gem 'tzinfo x64-mingw32' in any of the gem sources listed in your Gemfile. (Bundler::GemNotFound)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/20.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;레파지토리 폴더의 위치에서 다음 명령어를 입력해서 tzinfo를 설치하면 문제가 해결될 것입니다.
    &lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tzinfo &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tzinfo-data
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이번에는 깃 허브 블로그의 개발환경을 만드는 방법에 대해서 다뤄보았습니다. 이렇게 설정을 해두면 일일이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 해서 확인하는 과정을 거칠 필요 없이 실시간으로 변경 사항을 확인할 수 있습니다.&lt;br /&gt;
다음에는 &lt;kbd&gt;disqus&lt;/kbd&gt;를 이용해서 블로그에 댓글 기능을 추가하는 방법에 대해 알아보도록 하겠습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="GitHub" /><category term="GithubBlog" /><category term="GitHub" /><category term="GitHubBlog" /><summary type="html">개발 환경 구축 왜 해야 하나요?</summary></entry><entry><title type="html">GitHub 블로그 만들기(1) - jekyll 사용해서 테마 입히기</title><link href="https://present4n6.github.io/posts/MakeGitBlog/" rel="alternate" type="text/html" title="GitHub 블로그 만들기(1) - jekyll 사용해서 테마 입히기" /><published>2020-09-20T00:36:00+09:00</published><updated>2021-06-03T02:09:07+09:00</updated><id>https://present4n6.github.io/posts/MakeGitBlog</id><content type="html" xml:base="https://present4n6.github.io/posts/MakeGitBlog/">&lt;h2 id=&quot;왜-깃허브-블로그인가&quot;&gt;&lt;strong&gt;왜 깃허브 블로그인가?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;블로그 플랫폼은 다양한 종류가 있습니다.&lt;br /&gt;
tistory, github, velog, notion, naver 등이 있습니다. &lt;br /&gt;
개인적으로 기술 블로그를 운영하고 싶어서 여러 플랫폼을 찾아봤는데요,&lt;br /&gt;
제가 찾아보고 느낀점으로 플랫폼들을 평가해보자면 다음과 같습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;tistory
    &lt;ul&gt;
      &lt;li&gt;장점 : 다루기 쉽다, 사용하는 사람이 많다, 무난하다&lt;/li&gt;
      &lt;li&gt;단점 : 마크다운 문법에 뒤쳐지고 있다, 스킨찾기 힘들다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;github
    &lt;ul&gt;
      &lt;li&gt;장점 : 코드 수정해서 입맛대로 개조 가능, GitHub와 연동&lt;/li&gt;
      &lt;li&gt;단점 : 진입장벽이 높다, 반영되는데 좀 걸린다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;velog
    &lt;ul&gt;
      &lt;li&gt;장점 : 개발자 친화적, 간단하다&lt;/li&gt;
      &lt;li&gt;단점 : 꾸미는 맛이 없다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;notion
    &lt;ul&gt;
      &lt;li&gt;장점 : 편하다, 정리하기 좋음&lt;/li&gt;
      &lt;li&gt;단점 : 구글 검색하기 까다로움, 용량 제한&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;naver
    &lt;ul&gt;
      &lt;li&gt;장점 : 네이버에서 검색 잘 됨, 익숙하다&lt;/li&gt;
      &lt;li&gt;단점 : 구글에서 검색 잘 안됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;저는 깃허브 블로그를 선택했습니다. &lt;br /&gt;
블로그는 꾸미는 맛이 있어야 하는데 벨로그는 너무 단순해서 꾸미는 맛이 없고&lt;br /&gt;
티스토리에서는 제 마음에 드는 스킨을 못 찾았습니다.&lt;br /&gt;
그래서 깃블로그를 선택하게 되었고 그렇게 해서 이 블로그가 만들어졌습니다.&lt;br /&gt;
블로그를 만들고 이번 게시물이 첫 포스팅 입니다 ㅎㅎ&lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;깃허브-블로그-만들기&quot;&gt;&lt;strong&gt;깃허브 블로그 만들기&lt;/strong&gt;&lt;/h2&gt;

&lt;h3 id=&quot;1-깃허브-레파지토리-생성하기&quot;&gt;&lt;strong&gt;1. 깃허브 레파지토리 생성하기&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;깃허브 블로그를 만들기 위해서는 깃허브와 연동을 해야 합니다.&lt;br /&gt;
깃허브와 연동을 하기 위해서는 레파지토리를 생성해줘야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/1.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그 후 Repository name에 Owner(본인 ID).github.io 로 입력합니다.&lt;br /&gt;
또한 Initialize this repository with: 에 Add a README file 을 체크해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/2.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;이 과정을 잘 완료했다면 웹 주소 창에 ID.github.io 로 검색을 해보면 창이 뜨는 것을 확인할 수 있습니다.&lt;br /&gt;
이어서 Clone and Download 버튼을 누르면 주소가 나오는데 그 주소를 복사합니다.(저는 테스트로 만들어서 Code라고 뜹니다)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/3.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;그리고 Git 이 설치되어 있어야 하는데 설치를 안 하신 분들은 &lt;a href=&quot;https://git-scm.com/&quot;&gt;https://git-scm.com/&lt;/a&gt; 에서 할 수 있습니다.&lt;br /&gt;
우측 하단의 설치 파일을 다운로드 받고 실행해서 쭉 Next 넘기시면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/4.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git 설치가 완료되었으면 Git Bash를 실행하고 다음과 같이 입력하면 됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Repository를 저장할 폴더]
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git clone &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;복사했던 주소]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;잘 진행했다면 해당 경로에 다음과 같이 레파지토리가 생성된 것을 확인할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/5.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;2-깃허브-블로그-테마-입히기&quot;&gt;&lt;strong&gt;2. 깃허브 블로그 테마 입히기&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;깃허브 블로그는 깃허브에 올린 소스코드가 작동해서 보여지는 원리입니다.&lt;br /&gt;
따라서 사용자가 소스코드를 마음대로 바꿀 수 있다는 장점이 있습니다.&lt;br /&gt;
無에서 하나하나 개발할 필요는 없습니다.&lt;br /&gt;
Jekyll 라는 미리 만들어져 있는 테마를 가져와서 입맛에 맞게 수정해주면 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다음 링크에서 아래 사진과 같이 여러 개의 테마를 확인할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/6.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;마음에 드는 테마를 고른 후 소스코드 파일을 다운로드해서 압축을 해제한 뒤,&lt;br /&gt;
만들었던 레파지토리 폴더내에 복사해서 붙여줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/7.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;레파지토리에 파일을 넣었다면 다음과 같이 입력해서 Github에 파일이 연동될 수 있도록 commit 해줘야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Repository 폴더 위치]
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git add &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'메시지 입력'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;_config.yml 파일에서 블로그의 주소를 지정해주어야 합니다.&lt;br /&gt;
이 외에도 여러가지 소스코드들을 보고 본인 입맛대로 수정해서 커스터마이징하면 됩니다. 
블로그의 주소를 입력하고 commit을 했다면 블로그에 접속했을 때 테마가 적용된 것을 확인할 수 있을 것입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/post/makegitblog/8.png&quot; alt=&quot;upload-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;깃 허브에 수정한 소스코드를 커밋할 때 소스코드에 오류가 있으면 적용이 되지 않습니다.&lt;br /&gt;
그렇기 때문에 커밋을 했으면 꼭 깃허브에 접속해서 반영이 되었는지 확인하는 것이 좋습니다.&lt;br /&gt;
또한 반영된 코드는 블로그에 적용되는데 시간이 조금 걸릴 수 있습니다.&lt;br /&gt;
이 문제를 해결하기 위해 실시간으로 소스코드 변동에 대한 결과를 확인할 수 있는 방법이 있습니다.&lt;br /&gt;
다음 포스팅에서 이 내용에 대해 다뤄보도록 하겠습니다.&lt;/p&gt;</content><author><name>Present4n6</name></author><category term="GitHub" /><category term="GithubBlog" /><category term="GitHub" /><category term="GitHubBlog" /><summary type="html">왜 깃허브 블로그인가? 블로그 플랫폼은 다양한 종류가 있습니다. tistory, github, velog, notion, naver 등이 있습니다. 개인적으로 기술 블로그를 운영하고 싶어서 여러 플랫폼을 찾아봤는데요, 제가 찾아보고 느낀점으로 플랫폼들을 평가해보자면 다음과 같습니다. tistory 장점 : 다루기 쉽다, 사용하는 사람이 많다, 무난하다 단점 : 마크다운 문법에 뒤쳐지고 있다, 스킨찾기 힘들다 github 장점 : 코드 수정해서 입맛대로 개조 가능, GitHub와 연동 단점 : 진입장벽이 높다, 반영되는데 좀 걸린다 velog 장점 : 개발자 친화적, 간단하다 단점 : 꾸미는 맛이 없다 notion 장점 : 편하다, 정리하기 좋음 단점 : 구글 검색하기 까다로움, 용량 제한 naver 장점 : 네이버에서 검색 잘 됨, 익숙하다 단점 : 구글에서 검색 잘 안됨</summary></entry></feed>